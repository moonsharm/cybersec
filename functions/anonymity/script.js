// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function getIPAndLocation() {
    try {
      const response = await fetch('/api/ip-info');
      const data = await response.json();
      return {
        ip: data.query,
        country: data.country,
        region: data.regionName,
        city: data.city,
        isp: data.isp,
        lat: data.lat,
        lon: data.lon
      };
    } catch (error) {
      return { ip: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP", country: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
  function getPlugins() {
    return navigator.plugins.length ? 
        Array.from(navigator.plugins).map(plugin => plugin.name).join(", ") : 
        "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤";
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–µ–≤–∞–π—Å–æ–≤
async function checkMediaDevices() {
  try {
      const devices = await navigator.mediaDevices.enumerateDevices();
      const hasCamera = devices.some(device => device.kind === "videoinput");
      const hasMicrophone = devices.some(device => device.kind === "audioinput");

      return `–ö–∞–º–µ—Ä–∞: ${hasCamera ? "–ï—Å—Ç—å" : "–ù–µ—Ç"}, –ú–∏–∫—Ä–æ—Ñ–æ–Ω: ${hasMicrophone ? "–ï—Å—Ç—å" : "–ù–µ—Ç"}`;
  } catch (error) {
      return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å";
  }
}


  // –ü–æ–ª—É—á–µ–Ω–∏–µ User-Agent
  function getUserAgent() {
    return navigator.userAgent;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª)
  function getReferrer() {
    return document.referrer || '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ';
  }

  

  // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  async function checkAnonymity() {
    const reportDiv = document.getElementById('report');
    //reportDiv.innerHTML = '<p style="font-weight: 600;font-size: 20px;margin-bottom: 5px;">–°–∞–π—Ç—É –∏–∑–≤–µ—Å—Ç–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</p><p>–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...</p>';
    reportDiv.style.display = "block"
    reportDiv.style.backgroundColor = "none"
    reportDiv.style.border = "none"
    reportDiv.innerHTML = "<p style='text-align:center'>–ü—Ä–æ–≤–µ—Ä–∫–∞...</p>";

    try {
      const { ip, country, region, city, isp, lat, lon } = await getIPAndLocation();
      const userAgent = getUserAgent();
      const referrer = getReferrer();

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      let report = `
        <p style="font-weight: 600;font-size: 18px;margin-bottom: 5px;">–°–∞–π—Ç—É –∏–∑–≤–µ—Å—Ç–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</p>
        <p><span style="font-weight:600;">üåê IP-–∞–¥—Ä–µ—Å:</span> ${ip}</p>
        <p><span style="font-weight:600;">üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</span> –ì–æ—Ä–æ–¥: ${city}, –†–µ–≥–∏–æ–Ω: ${region}, –°—Ç—Ä–∞–Ω–∞: ${country} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${lat}, ${lon}</p>
        <p><span style="font-weight:600;">üõ∞Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä:</span> ${isp}</p>
        <p><span style="font-weight:600;">üíª –ë—Ä–∞—É–∑–µ—Ä –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</span> ${userAgent}</p>
        <p><span style="font-weight:600;">üîó –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ (Referrer):</span> ${referrer}</p>
      `;

    
      reportDiv.innerHTML = "";
      reportDiv.style.backgroundColor = "#f8f9fa"
      reportDiv.style.border = "1px solid #ddd"

      // –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
      reportDiv.innerHTML = report;
    } catch (error) {
      reportDiv.innerHTML = '<p>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</p>';
    }
  }


 

var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.maxHeight) {
      panel.style.maxHeight = null;
    } else {
      panel.style.maxHeight = panel.scrollHeight + "px";
    }
  });
}




const quiz = [
  {
    question: "–ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É IP-–∞–¥—Ä–µ—Å—É?",
    answers: ["–í–∞—à —Ç–æ—á–Ω—ã–π –¥–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å", "–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤", "–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä", "–í–∞—à–∏ –ø–∞—Ä–æ–ª–∏ –∏ –ª–æ–≥–∏–Ω—ã"],
    correct: 2
  },
  {
    question: "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?",
    answers: ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN –∏–ª–∏ Tor", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–∞–π—Ç–æ–≤", "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"],
    correct: 1
  },
  {
    question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, –µ—Å–ª–∏ —Å–∞–π—Ç —É–∑–Ω–∞—ë—Ç –≤–∞—à User-Agent?",
    answers: ["–°–∞–π—Ç –∑–Ω–∞–µ—Ç –≤–∞—à –ª–æ–≥–∏–Ω", "–°–∞–π—Ç –∑–Ω–∞–µ—Ç –≤–∞—à IP-–∞–¥—Ä–µ—Å", "–°–∞–π—Ç –∑–Ω–∞–µ—Ç –≤–∞—à –ø–∞—Ä–æ–ª—å", "–°–∞–π—Ç –∑–Ω–∞–µ—Ç –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –±—Ä–∞—É–∑–µ—Ä"],
    correct: 3
  },
  {
    question: "–î–ª—è —á–µ–≥–æ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è VPN?",
    answers: ["–ß—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–∞–Ω–Ω—ã—Ö", "–î–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ –∏ –∑–∞—â–∏—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞", "–î–ª—è –∑–∞—â–∏—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"],
    correct: 2
  },
  {
    question: "–ß—Ç–æ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫, –µ—Å–ª–∏ –µ–º—É –∏–∑–≤–µ—Å—Ç–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ?",
    answers: ["–ü—Ä–æ–≤–µ—Å—Ç–∏ fingerprinting –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º—É —Å—á—ë—Ç—É", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω–æ", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"],
    correct: 0
  }
];

let currentQuestion = 0;
let selectedAnswers = Array(quiz.length).fill(null);

const modal = document.getElementById("quizModal");
const qText = document.getElementById("question-text");
const answersContainer = document.getElementById("answers");
const counter = document.getElementById("question-counter");
const prevBtn = document.getElementById("prev-btn");
const nextBtn = document.getElementById("next-btn");
const result = document.getElementById("test-result");

function openModal() {
  modal.style.display = "block";
  currentQuestion = 0;
  selectedAnswers = Array(quiz.length).fill(null);

  // –°–±—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
  prevBtn.style.display = "inline-block";
  nextBtn.style.display = "inline-block";

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –∏ —Å—á—ë—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
  counter.textContent = "";
  qText.textContent = "";
  answersContainer.innerHTML = "";

  renderQuestion();
}

function closeModal() {
  modal.style.display = "none";
  qText.textContent = "";
  answersContainer.innerHTML = "";
  counter.textContent = "";
  prevBtn.style.display = "inline-block";
  nextBtn.style.display = "inline-block";
}

function renderQuestion() {
  result.textContent = ``
  const q = quiz[currentQuestion];
  qText.textContent = q.question;
  answersContainer.innerHTML = "";

  q.answers.forEach((answer, index) => {
    const id = `answer_${index}`;
    const label = document.createElement("label");
    label.innerHTML = `<input type="radio" name="answer" id="${id}" value="${index}" ${
      selectedAnswers[currentQuestion] === index ? "checked" : ""
    }> ${answer}`;
    answersContainer.appendChild(label);
  });

  counter.textContent = `${currentQuestion + 1} / ${quiz.length}`;
  prevBtn.disabled = currentQuestion === 0;
  nextBtn.textContent = currentQuestion === quiz.length - 1 ? "–ó–∞–≤–µ—Ä—à–∏—Ç—å" : "–í–ø–µ—Ä—ë–¥";
}

prevBtn.onclick = () => {
  saveAnswer();
  if (currentQuestion > 0) {
    currentQuestion--;
    renderQuestion();
  }
};

nextBtn.onclick = () => {
  saveAnswer();
  if (currentQuestion < quiz.length - 1) {
    currentQuestion++;
    renderQuestion();
  } else {
    showResults();
  }
};

function saveAnswer() {
  const selected = document.querySelector("input[name='answer']:checked");
  if (selected) selectedAnswers[currentQuestion] = parseInt(selected.value);
}

function showResults() {
  let score = 0;
  quiz.forEach((q, i) => {
    if (selectedAnswers[i] === q.correct) score++;
  });
  qText.textContent = ``;
  result.textContent = `–í—ã –Ω–∞–±—Ä–∞–ª–∏ ${score} –∏–∑ ${quiz.length} –±–∞–ª–ª–æ–≤.`;
  answersContainer.innerHTML = "";
  counter.textContent = "";
  prevBtn.style.display = "none";
  nextBtn.style.display = "none";
}